{
  "name": "root-require",
  "version": "0.2.0",
  "description": "require() using a relative path from the root directory of the present module",
  "main": "index.js",
  "dependencies": {
    "packpath": "~0.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikermcneil/root-require.git"
  },
  "keywords": [
    "root",
    "require",
    "relative"
  ],
  "author": {
    "name": "Mike McNeil"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikermcneil/root-require/issues"
  },
  "homepage": "https://github.com/mikermcneil/root-require",
  "readme": "root-require\n============\n> a more convenient require method for certain situations\n\n\n## How it do\nThis lets you `require()` using a relative path from the root directory of the present module.\n\n> Keep in mind `require()` is synchronous.  And this library is not any more efficient-- (it uses `fs.*Sync` methods)\n> Just like when you use `require()`, you should be fine as long as you're doing this at the top of your file outside of any function declarations.\n\n\n\n## Usage\n\nJust once:\n```javascript\nvar Sails = require('root-require')('lib/app');\n```\n\nMore than once:\n```javascript\nvar rootRequire = require('root-require');\n\nvar Sails = rootRequire('lib/app');\nvar Router = rootRequire('lib/router');\nvar MiddlewareLibrary = rootRequire('lib/middleware');\n```\n\n\n\n## Why is this a good thing?\n\nIt's easier to reason about the structure of your module when the paths are consistent.  The structure of your project becomes more declarative- dependencies are consistently referenced, irrespective of the user file's home in the directory structure.\n\n#### Problems w/ `require()`\n\n1. When you move a dependency file (_A<sub>x</sub>_) required by multiple files (_B<sub>i</sub>_), you have to find/replace the all references to _A<sub>x</sub>_.  This is normally hard, because the argument to the `require(...)` function depends on where the user file (_B<sub>i</sub>_) is located.\n2. When you move a file (_B<sub>x</sub>_) which depends on another file (_A<sub>x</sub>_), you normally have to update the `require()` call in _B<sub>x</sub>_ to reflect the new relative path from _B<sub>x</sub>_ to _A<sub>x</sub>_.\n\ne.g. Consider trying to change the path to `giggle.js` in an automated way:\n\nhard \n```javascript\n// foo.js\nvar Giggle = require('./wiggle/sniggle/giggle');\n\n// bar.js\nvar Giggle = require('../../../../../wiggle/sniggle/giggle');\n\n// baz.js\nvar Giggle = require('../../../../wiggle/sniggle/giggle');\n\n// 20 more files like this, 100 other files like `giggle.js`\n```\n\neasy\n```javascript\n// foo.js\nvar Giggle = require('root-require')('lib/wiggle/sniggle/giggle');\n\n// bar.js\nvar Giggle = require('root-require')('lib/wiggle/sniggle/giggle');\n\n// baz.js\nvar Giggle = require('root-require')('lib/wiggle/sniggle/giggle');\n\n// 20 more files like this, 100 other files like `giggle.js`\n```\n\n\n\n\n\n\n## Credit where credit is due\nThis module is literally a 3-line wrapper around the awesome `packpath` module (https://github.com/jprichardson/node-packpath).  I just made this for convenience/ so I could have it in one line because I always forget how `path.join` works w/ Windows and all that.\n\n\n## License\n\nMIT, c. 2014 Mike McNeil\n",
  "readmeFilename": "README.md",
  "_id": "root-require@0.2.0",
  "dist": {
    "shasum": "7e74337f55d747ee9c30c24d262d10a2b6dd3853"
  },
  "_from": "root-require@~0.2.0",
  "_resolved": "https://registry.npmjs.org/root-require/-/root-require-0.2.0.tgz"
}
